$date
	Sun Jun 26 21:25:58 2016
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var wire 16 ! y [15:0] $end
$var reg 16 " a [15:0] $end
$var reg 1 # sel $end
$scope module reversal_module $end
$var wire 16 $ a [15:0] $end
$var wire 1 # sel $end
$var wire 16 % y [15:0] $end
$scope begin genblk0000000000000001 $end
$scope module reversal_mux $end
$var wire 1 & a $end
$var wire 1 ' b $end
$var wire 1 # sel $end
$var reg 1 ( y $end
$upscope $end
$upscope $end
$scope begin genblk000000000000001 $end
$scope module reversal_mux $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 # sel $end
$var reg 1 + y $end
$upscope $end
$upscope $end
$scope begin genblk00000000000001 $end
$scope module reversal_mux $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 # sel $end
$var reg 1 . y $end
$upscope $end
$upscope $end
$scope begin genblk0000000000001 $end
$scope module reversal_mux $end
$var wire 1 / a $end
$var wire 1 0 b $end
$var wire 1 # sel $end
$var reg 1 1 y $end
$upscope $end
$upscope $end
$scope begin genblk000000000001 $end
$scope module reversal_mux $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 # sel $end
$var reg 1 4 y $end
$upscope $end
$upscope $end
$scope begin genblk00000000001 $end
$scope module reversal_mux $end
$var wire 1 5 a $end
$var wire 1 6 b $end
$var wire 1 # sel $end
$var reg 1 7 y $end
$upscope $end
$upscope $end
$scope begin genblk0000000001 $end
$scope module reversal_mux $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 # sel $end
$var reg 1 : y $end
$upscope $end
$upscope $end
$scope begin genblk000000001 $end
$scope module reversal_mux $end
$var wire 1 ; a $end
$var wire 1 < b $end
$var wire 1 # sel $end
$var reg 1 = y $end
$upscope $end
$upscope $end
$scope begin genblk00000001 $end
$scope module reversal_mux $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 # sel $end
$var reg 1 @ y $end
$upscope $end
$upscope $end
$scope begin genblk0000001 $end
$scope module reversal_mux $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 # sel $end
$var reg 1 C y $end
$upscope $end
$upscope $end
$scope begin genblk000001 $end
$scope module reversal_mux $end
$var wire 1 D a $end
$var wire 1 E b $end
$var wire 1 # sel $end
$var reg 1 F y $end
$upscope $end
$upscope $end
$scope begin genblk00001 $end
$scope module reversal_mux $end
$var wire 1 G a $end
$var wire 1 H b $end
$var wire 1 # sel $end
$var reg 1 I y $end
$upscope $end
$upscope $end
$scope begin genblk0001 $end
$scope module reversal_mux $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 # sel $end
$var reg 1 L y $end
$upscope $end
$upscope $end
$scope begin genblk001 $end
$scope module reversal_mux $end
$var wire 1 M a $end
$var wire 1 N b $end
$var wire 1 # sel $end
$var reg 1 O y $end
$upscope $end
$upscope $end
$scope begin genblk01 $end
$scope module reversal_mux $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 # sel $end
$var reg 1 R y $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$scope module reversal_mux $end
$var wire 1 S a $end
$var wire 1 T b $end
$var wire 1 # sel $end
$var reg 1 U y $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1U
0T
1S
1R
0Q
1P
1O
0N
1M
1L
0K
1J
0I
1H
0G
0F
1E
0D
0C
1B
0A
0@
1?
0>
1=
0<
1;
1:
09
18
17
06
15
14
03
12
01
10
0/
0.
1-
0,
0+
1*
0)
0(
1'
0&
b111100001111 %
b111100001111 $
0#
b111100001111 "
b111100001111 !
$end
#10
1(
1+
1.
11
04
07
0:
0=
1@
1C
1F
1I
0L
0O
0R
b1111000011110000 !
b1111000011110000 %
0U
1#
#20
